name: Release Binaries

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release"
        required: true
        default: "v0.0.0-dev"

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          check-latest: true

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build CLI binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ steps.version.outputs.version }}
          CGO_ENABLED: 0
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          LDFLAGS="-s -w -X 'main.Version=${VERSION}' -X 'main.Commit=${COMMIT_HASH}' -X 'main.BuildTime=${BUILD_TIME}'"

          go build -ldflags="${LDFLAGS}" -o dragonglass-${{ matrix.suffix }} ./cmd/dragonglass

      - name: Build dragonglass-build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ steps.version.outputs.version }}
          CGO_ENABLED: 0
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          LDFLAGS="-s -w -X 'main.Version=${VERSION}' -X 'main.Commit=${COMMIT_HASH}' -X 'main.BuildTime=${BUILD_TIME}'"

          go build -ldflags="${LDFLAGS}" -o dragonglass-build-${{ matrix.suffix }} ./cmd/dragonglass-build

      - name: Create tarball
        run: |
          tar -czf dragonglass-${{ steps.version.outputs.version }}-${{ matrix.suffix }}.tar.gz \
            dragonglass-${{ matrix.suffix }} \
            dragonglass-build-${{ matrix.suffix }} \
            README.md \
            LICENSE

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dragonglass-${{ steps.version.outputs.version }}-${{ matrix.suffix }}
          path: |
            dragonglass-${{ steps.version.outputs.version }}-${{ matrix.suffix }}.tar.gz
            dragonglass-${{ matrix.suffix }}
            dragonglass-build-${{ matrix.suffix }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum *.tar.gz > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Dragonglass ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
          files: |
            release-assets/*.tar.gz
            release-assets/checksums.txt
          body: |
            ## Dragonglass ${{ steps.version.outputs.version }}

            ### Installation

            Download the appropriate binary for your platform:

            **macOS (Apple Silicon)**:
            ```bash
            curl -L -o dragonglass.tar.gz https://github.com/gillisandrew/dragonglass-poc/releases/download/${{ steps.version.outputs.version }}/dragonglass-${{ steps.version.outputs.version }}-darwin-arm64.tar.gz
            tar -xzf dragonglass.tar.gz
            chmod +x dragonglass-darwin-arm64
            sudo mv dragonglass-darwin-arm64 /usr/local/bin/dragonglass
            ```

            **macOS (Intel)**:
            ```bash
            curl -L -o dragonglass.tar.gz https://github.com/gillisandrew/dragonglass-poc/releases/download/${{ steps.version.outputs.version }}/dragonglass-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz
            tar -xzf dragonglass.tar.gz
            chmod +x dragonglass-darwin-amd64
            sudo mv dragonglass-darwin-amd64 /usr/local/bin/dragonglass
            ```

            **Linux (x64)**:
            ```bash
            curl -L -o dragonglass.tar.gz https://github.com/gillisandrew/dragonglass-poc/releases/download/${{ steps.version.outputs.version }}/dragonglass-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
            tar -xzf dragonglass.tar.gz
            chmod +x dragonglass-linux-amd64
            sudo mv dragonglass-linux-amd64 /usr/local/bin/dragonglass
            ```

            **Linux (ARM64)**:
            ```bash
            curl -L -o dragonglass.tar.gz https://github.com/gillisandrew/dragonglass-poc/releases/download/${{ steps.version.outputs.version }}/dragonglass-${{ steps.version.outputs.version }}-linux-arm64.tar.gz
            tar -xzf dragonglass.tar.gz
            chmod +x dragonglass-linux-arm64
            sudo mv dragonglass-linux-arm64 /usr/local/bin/dragonglass
            ```

            ### Verification

            Verify the integrity of downloaded files using the checksums:
            ```bash
            sha256sum -c checksums.txt
            ```

            ### What's Changed

            See the full changelog below for details on what's included in this release.

  create-oci-artifacts:
    name: Create OCI Artifacts
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up ORAS
        uses: oras-project/setup-oras@v1

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | oras login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Prepare OCI artifacts
        run: |
          mkdir -p oci-artifacts

          # Copy all binaries to oci-artifacts
          find artifacts -name "dragonglass-*" -not -name "*.tar.gz" -exec cp {} oci-artifacts/ \;

          # Copy documentation
          cp README.md LICENSE oci-artifacts/

          ls -la oci-artifacts/

      - name: Push OCI artifact
        id: push
        run: |
          cd oci-artifacts
          DIGEST=$(oras push ${{ env.REGISTRY }}/gillisandrew/dragonglass-poc:${{ steps.version.outputs.version }} \
            --annotation "org.opencontainers.image.title=Dragonglass" \
            --annotation "org.opencontainers.image.description=A secure plugin manager for Obsidian with supply chain verification" \
            --annotation "org.opencontainers.image.version=${{ steps.version.outputs.version }}" \
            --annotation "org.opencontainers.image.source=https://github.com/gillisandrew/dragonglass-poc" \
            --annotation "org.opencontainers.image.licenses=MIT" \
            dragonglass-* README.md LICENSE | grep -o 'sha256:[a-f0-9]\{64\}')

          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

          # Also tag as latest if this is not a pre-release
          if [[ ! "${{ steps.version.outputs.version }}" =~ "-" ]]; then
            oras tag ${{ env.REGISTRY }}/gillisandrew/dragonglass-poc:${{ steps.version.outputs.version }} latest
          fi

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          upload-artifact: true

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/gillisandrew/dragonglass-poc
          subject-digest: ${{ steps.push.outputs.digest }}
          sbom-path: ./_manifest/sbom.spdx.json
          push-to-registry: true

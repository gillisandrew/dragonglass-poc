name: Build and Attest Plugin

on:
  workflow_call:
    inputs:
      plugin-directory:
        description: 'Working directory containing package.json and build files'
        required: false
        type: string
        default: '.'
      esbuild-config:
        description: 'Path to esbuild config file'
        required: false
        type: string
        default: 'esbuild.config.mjs'
    outputs:
      subject-name:
        description: 'Name of the built artifact'
        value: ${{ jobs.build-and-attest.outputs.subject-name }}
      subject-digest:
        description: 'SHA256 digest of the artifact'
        value: ${{ jobs.build-and-attest.outputs.subject-digest }}
      sbom-attestation-url:
        description: 'URL of the SBOM attestation'
        value: ${{ jobs.build-and-attest.outputs.sbom-attestation-url }}
      provenance-attestation-url:
        description: 'URL of the provenance attestation'
        value: ${{ jobs.build-and-attest.outputs.provenance-attestation-url }}

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  build-and-attest:
    runs-on: ubuntu-latest
    outputs:
      subject-name: "${{ steps.push-to-ghcr.outputs.subject-name }}:${{ steps.artifact-metadata.outputs.name }}"
      subject-digest: ${{ steps.push-to-ghcr.outputs.subject-digest }}
      sbom-attestation-url: ${{ steps.attest-sbom.outputs.attestation-url }}
      provenance-attestation-url: ${{ steps.attest-provenance.outputs.attestation-url}}
    env:
      VENDOR_MEDIA_TYPE_NAMESPACE: vnd.dragonglass.plugin
      PLUGIN_DIR: "${{ inputs.plugin-directory }}"
      SBOM_OUTPUT_FILE: "${{ github.workspace }}/sbom.spdx.json"
      BUILD_OUTPUT_DIR: "${{ github.workspace }}/${{ inputs.plugin-directory }}/dist"
      ESBUILD_CONFIG: "${{ inputs.esbuild-config }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Resolve plugin metadata
        id: plugin-metadata
        run: |
          # Extract plugin metadata from manifest.json
          echo "name=$(jq -r '.name' ${{ inputs.plugin-directory }}/manifest.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r '.version' ${{ inputs.plugin-directory }}/manifest.json)" >> $GITHUB_OUTPUT
          echo "id=$(jq -r '.id' ${{ inputs.plugin-directory }}/manifest.json)" >> $GITHUB_OUTPUT
          echo "min-app-version=$(jq -r '.minAppVersion' ${{ inputs.plugin-directory }}/manifest.json)" >> $GITHUB_OUTPUT
          echo "is-desktop-only=$(jq -r '.isDesktopOnly' ${{ inputs.plugin-directory }}/manifest.json)" >> $GITHUB_OUTPUT
          echo "description=$(jq -r '.description' ${{ inputs.plugin-directory }}/manifest.json)" >> $GITHUB_OUTPUT
          echo "author=$(jq -r '.author' ${{ inputs.plugin-directory }}/manifest.json)" >> $GITHUB_OUTPUT
          echo "author-url=$(jq -r '.authorUrl' ${{ inputs.plugin-directory }}/manifest.json)" >> $GITHUB_OUTPUT

      - name: Resolve artifact metadata
        id: artifact-metadata
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}
          PLUGIN_ID: ${{ steps.plugin-metadata.outputs.id }}
        run: |
          # Construct artifact name
          echo "name=$PLUGIN_ID-$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: |
            ${{ inputs.plugin-directory }}/package-lock.json

      - name: Install and record dependencies
        id: install-dependencies
        working-directory: ${{ inputs.plugin-directory }}
        env:
          SBOM_FILE: "${{ github.workspace }}/${{ steps.artifact-metadata.outputs.name }}.spdx.json"
        run: |
          npm ci
          npm sbom \
            --sbom-format spdx \
            --omit dev \
            --sbom-type application \
            --package-lock-only > $SBOM_FILE

          echo "sbom-file=$SBOM_FILE" >> $GITHUB_OUTPUT
          echo "licenses=$(jq -r '.packages[].licenseDeclared | select(. != null)' $SBOM_FILE | sort -u)" >> $GITHUB_OUTPUT

      - name: Build plugin with esbuild
        working-directory: ${{ inputs.plugin-directory }}
        env:
          NODE_ENV: production
        run: node $ESBUILD_CONFIG

      - name: Generate annotation file
        id: generate-annotation
        working-directory: ${{ inputs.plugin-directory }}
        env:
          PLUGIN_NAME: ${{ steps.plugin-metadata.outputs.name }}
          PLUGIN_VERSION: ${{ steps.plugin-metadata.outputs.version }}
          PLUGIN_ID: ${{ steps.plugin-metadata.outputs.id }}
          PLUGIN_MIN_APP_VERSION: ${{ steps.plugin-metadata.outputs.min-app-version }}
          PLUGIN_IS_DESKTOP_ONLY: ${{ steps.plugin-metadata.outputs.is-desktop-only }}
          PLUGIN_DESCRIPTION: ${{ steps.plugin-metadata.outputs.description }}
          PLUGIN_AUTHOR: ${{ steps.plugin-metadata.outputs.author }}
          PLUGIN_AUTHOR_URL: ${{ steps.plugin-metadata.outputs.author-url }}
          ANNOTATION_FILE: "${{ github.workspace }}/annotations.json"
        run: |
          jq -nc \
          --arg name "$PLUGIN_NAME" \
          --arg version "$PLUGIN_VERSION" \
          --arg id "$PLUGIN_ID" \
          --arg minAppVersion "$PLUGIN_MIN_APP_VERSION" \
          --arg isDesktopOnly "$PLUGIN_IS_DESKTOP_ONLY" \
          --arg description "$PLUGIN_DESCRIPTION" \
          --arg author "$PLUGIN_AUTHOR" \
          --arg authorUrl "$PLUGIN_AUTHOR_URL" \
          '
          {
            "$manifest": {
              "vnd.obsidian.plugin.id": $id,
              "vnd.obsidian.plugin.name": $name,
              "vnd.obsidian.plugin.version": $version,
              "vnd.obsidian.plugin.minAppVersion": $minAppVersion,
              "vnd.obsidian.plugin.description": $description,
              "vnd.obsidian.plugin.author": $author,
              "vnd.obsidian.plugin.authorUrl": $authorUrl,
              "vnd.obsidian.plugin.isDesktopOnly": $isDesktopOnly
            }
          }' > $ANNOTATION_FILE
          echo "annotation-file=$ANNOTATION_FILE" >> $GITHUB_OUTPUT
      - uses: oras-project/setup-oras@v1
      - id: push-to-ghcr
        name: Push artifact to GitHub Container Registry
        working-directory: ${{ env.BUILD_OUTPUT_DIR }}
        env:
          OCI_REGISTRY: ghcr.io
          OCI_REPOSITORY: ${{ github.repository }}
          ARTIFACT_NAME: ${{ steps.artifact-metadata.outputs.name }}
          GITHUB_TOKEN: ${{ github.token }}
          ANNOTATION_FILE: ${{ steps.generate-annotation.outputs.annotation-file }}
        run: |

          echo "Pushing artifact to $SUBJECT_NAME"
          echo "${{ github.token }}" | oras login --username ${{ github.actor }} --password-stdin ghcr.io
          PUSH_OUTPUT=`oras push \
            --annotation-file $ANNOTATION_FILE $OCI_REGISTRY/$OCI_REPOSITORY:$ARTIFACT_NAME \
            --artifact-type application/${{env.VENDOR_MEDIA_TYPE_NAMESPACE}} \
            ./main.js:application/javascript \
            ./styles.css:text/css \
            --format json`
          echo "$PUSH_OUTPUT"

          echo "subject-name=$OCI_REGISTRY/$OCI_REPOSITORY" >> $GITHUB_OUTPUT
          echo "subject-digest=$(echo "$PUSH_OUTPUT" | jq -r '.digest')" >> $GITHUB_OUTPUT


      - name: Attest SBOM
        id: attest-sbom
        uses: actions/attest-sbom@v3
        with:
          sbom-path: ${{ steps.install-dependencies.outputs.sbom-file }}
          push-to-registry: true
          subject-digest: ${{steps.push-to-ghcr.outputs.subject-digest}}
          subject-name: ${{steps.push-to-ghcr.outputs.subject-name}}

      - name: Attest build provenance
        id: attest-provenance
        uses: actions/attest-build-provenance@v3
        with:
          push-to-registry: true
          subject-digest: ${{steps.push-to-ghcr.outputs.subject-digest}}
          subject-name: ${{steps.push-to-ghcr.outputs.subject-name}}

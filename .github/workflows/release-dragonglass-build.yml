name: Release Dragonglass Build CLI

on:
  push:
    tags:
      - "dragonglass-build/v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., dragonglass-build/v1.0.0)"
        required: true

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build Dragonglass Build CLI
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          check-latest: true

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          # Extract just the version part (v1.0.0) from dragonglass-build/v1.0.0
          CLEAN_VERSION="${VERSION#dragonglass-build/}"
          echo "version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
          echo "full_tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build CLI binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ steps.version.outputs.version }}
          CGO_ENABLED: 0
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          LDFLAGS="-s -w -X 'main.Version=${VERSION}' -X 'main.Commit=${COMMIT_HASH}' -X 'main.BuildTime=${BUILD_TIME}'"

          go build -ldflags="${LDFLAGS}" -o dragonglass-build-${{ matrix.suffix }} ./cmd/dragonglass-build

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: dragonglass-build-${{ matrix.suffix }}

      - name: Create tarball
        run: |
          tar -czf dragonglass-build-${{ steps.version.outputs.version }}-${{ matrix.suffix }}.tar.gz \
            dragonglass-build-${{ matrix.suffix }} \
            README.md \
            LICENSE

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dragonglass-build-${{ steps.version.outputs.version }}-${{ matrix.suffix }}
          path: dragonglass-build-${{ steps.version.outputs.version }}-${{ matrix.suffix }}.tar.gz

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/dragonglass-build/')
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version
        id: version
        run: |
          FULL_TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${FULL_TAG#dragonglass-build/}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "full_tag=${FULL_TAG}" >> $GITHUB_OUTPUT

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum *.tar.gz > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.full_tag }}
          name: Dragonglass Build CLI ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
          files: |
            release-assets/*.tar.gz
            release-assets/checksums.txt
          body: |
            ## Dragonglass Build CLI ${{ steps.version.outputs.version }}

            CLI tool to build Obsidian plugins using Dagger with reproducible builds.

            ### Installation

            **macOS (Apple Silicon)**:
            ```bash
            curl -L -o dragonglass-build.tar.gz https://github.com/gillisandrew/dragonglass-poc/releases/download/${{ steps.version.outputs.full_tag }}/dragonglass-build-${{ steps.version.outputs.version }}-darwin-arm64.tar.gz
            tar -xzf dragonglass-build.tar.gz
            chmod +x dragonglass-build-darwin-arm64
            sudo mv dragonglass-build-darwin-arm64 /usr/local/bin/dragonglass-build
            ```

            **macOS (Intel)**:
            ```bash
            curl -L -o dragonglass-build.tar.gz https://github.com/gillisandrew/dragonglass-poc/releases/download/${{ steps.version.outputs.full_tag }}/dragonglass-build-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz
            tar -xzf dragonglass-build.tar.gz
            chmod +x dragonglass-build-darwin-amd64
            sudo mv dragonglass-build-darwin-amd64 /usr/local/bin/dragonglass-build
            ```

            **Linux (x64)**:
            ```bash
            curl -L -o dragonglass-build.tar.gz https://github.com/gillisandrew/dragonglass-poc/releases/download/${{ steps.version.outputs.full_tag }}/dragonglass-build-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
            tar -xzf dragonglass-build.tar.gz
            chmod +x dragonglass-build-linux-amd64
            sudo mv dragonglass-build-linux-amd64 /usr/local/bin/dragonglass-build
            ```

            ### Usage

            ```bash
            # Build plugin from remote repository
            dragonglass-build https://github.com/user/repo.git --ref main

            # Build plugin from local directory
            dragonglass-build ./plugin-directory

            # Build from specific commit
            dragonglass-build https://github.com/user/repo.git --commit abc123def456
            ```

            ### OCI Installation (Alternative)

            You can also install using ORAS from the GitHub Container Registry:

            ```bash
            # Pull the OCI artifact
            oras pull ${{ env.REGISTRY }}/gillisandrew/dragonglass-poc/dragonglass-build:${{ steps.version.outputs.version }}

            # Make executable and install
            chmod +x dragonglass-build-*
            sudo mv dragonglass-build-<your-platform> /usr/local/bin/dragonglass-build
            ```

            ### Verification & Security

            This release includes comprehensive supply chain security features:

            #### 1. Checksum Verification
            ```bash
            # Download the checksums file and verify integrity
            curl -L -o checksums.txt https://github.com/gillisandrew/dragonglass-poc/releases/download/${{ steps.version.outputs.full_tag }}/checksums.txt
            sha256sum -c checksums.txt
            ```

            #### 2. Provenance Attestation Verification

            **Prerequisites:**
            ```bash
            # Install GitHub CLI if not already installed
            # macOS: brew install gh
            # Linux: https://github.com/cli/cli/blob/trunk/docs/install_linux.md
            # Windows: https://github.com/cli/cli/releases

            # Authenticate with GitHub
            gh auth login
            ```

            **Verify Binary Provenance:**
            ```bash
            # Download the binary you want to verify
            curl -L -o dragonglass-build.tar.gz https://github.com/gillisandrew/dragonglass-poc/releases/download/${{ steps.version.outputs.full_tag }}/dragonglass-build-${{ steps.version.outputs.version }}-darwin-arm64.tar.gz
            tar -xzf dragonglass-build.tar.gz

            # Verify the binary was built by our authorized workflow
            gh attestation verify dragonglass-build-darwin-arm64 --owner gillisandrew

            # For detailed attestation information
            gh attestation verify dragonglass-build-darwin-arm64 --owner gillisandrew --format json
            ```

            **What the Provenance Verification Checks:**
            - ✅ Binary was built by the official GitHub Actions workflow
            - ✅ Build occurred from the tagged commit in this repository
            - ✅ No unauthorized modifications to the build process
            - ✅ Cryptographic integrity of the build environment

            #### 3. OCI Artifact Verification

            **Automatic Verification:**
            ```bash
            # ORAS automatically verifies attestations when pulling
            oras pull ${{ env.REGISTRY }}/gillisandrew/dragonglass-build:${{ steps.version.outputs.version }} --verbose
            ```

            **Manual Verification:**
            ```bash
            # List all attestations for the OCI artifact
            oras discover ${{ env.REGISTRY }}/gillisandrew/dragonglass-poc/dragonglass-build:${{ steps.version.outputs.version }}

            # Verify specific attestation types
            gh attestation verify oci://${{ env.REGISTRY }}/gillisandrew/dragonglass-poc/dragonglass-build:${{ steps.version.outputs.version }} --owner gillisandrew
            ```

            #### 4. SBOM (Software Bill of Materials) Verification
            ```bash
            # The SBOM is automatically generated and attested
            # View SBOM details through GitHub's dependency graph or via CLI
            gh api repos/gillisandrew/dragonglass-poc/dependency-graph/sbom
            ```

            #### 5. Advanced Security Practices

            **For Enterprise/Security-Critical Environments:**
            ```bash
            # 1. Always verify provenance before execution
            gh attestation verify dragonglass-build-darwin-arm64 --owner gillisandrew

            # 2. Check the specific workflow that built the binary
            gh attestation verify dragonglass-build-darwin-arm64 --owner gillisandrew --format json | jq '.verificationResult.statement.predicate.buildDefinition.buildType'

            # 3. Verify the exact commit SHA that produced the binary
            gh attestation verify dragonglass-build-darwin-arm64 --owner gillisandrew --format json | jq '.verificationResult.statement.predicate.buildDefinition.resolvedDependencies[0].digest'

            # 4. Ensure binary matches expected checksum
            sha256sum dragonglass-build-darwin-arm64
            grep dragonglass-build-darwin-arm64 checksums.txt
            ```

            **Troubleshooting Verification:**
            - If `gh attestation verify` fails, the binary may have been tampered with
            - Ensure you're using the latest GitHub CLI: `gh version`
            - For corporate networks, ensure access to `https://github.com` and `https://fulcio.sigstore.dev`
            - Contact repository maintainers if verification consistently fails

            **Security Policy:**
            This project follows SLSA Level 3 requirements for supply chain security. All binaries include cryptographic provenance attestations that can be independently verified.

  create-oci-artifacts:
    name: Create OCI Artifacts
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up ORAS
        uses: oras-project/setup-oras@v1

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          CLEAN_VERSION="${VERSION#dragonglass-build/}"
          echo "version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
          echo "full_tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | oras login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Prepare OCI artifacts
        run: |
          mkdir -p oci-artifacts

          # Extract and copy all binaries
          find artifacts -name "*.tar.gz" -exec tar -C oci-artifacts -xzf {} \;

          # Copy documentation
          cp README.md LICENSE oci-artifacts/

          ls -la oci-artifacts/

      - name: Push OCI artifact
        id: push
        run: |
          cd oci-artifacts
          DIGEST=$(oras push ${{ env.REGISTRY }}/gillisandrew/dragonglass-poc/dragonglass-build:${{ steps.version.outputs.version }} \
            --annotation "org.opencontainers.image.title=Dragonglass Build CLI" \
            --annotation "org.opencontainers.image.description=CLI tool to build Obsidian plugins using Dagger with reproducible builds" \
            --annotation "org.opencontainers.image.version=${{ steps.version.outputs.version }}" \
            --annotation "org.opencontainers.image.source=https://github.com/gillisandrew/dragonglass-poc" \
            --annotation "org.opencontainers.image.licenses=MIT" \
            dragonglass-build-* README.md LICENSE | grep -o 'sha256:[a-f0-9]\{64\}')

          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

          # Also tag as latest if this is not a pre-release
          if [[ ! "${{ steps.version.outputs.version }}" =~ "-" ]]; then
            oras tag ${{ env.REGISTRY }}/gillisandrew/dragonglass-poc/dragonglass-build:${{ steps.version.outputs.version }} latest
          fi

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          upload-artifact: true

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/gillisandrew/dragonglass-build
          subject-digest: ${{ steps.push.outputs.digest }}
          sbom-path: ./_manifest/sbom.spdx.json
          push-to-registry: true

      - name: Attest build provenance for OCI artifact
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/gillisandrew/dragonglass-build
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

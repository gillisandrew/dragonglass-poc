name: Update Packages

on:
  push:
    paths:
      - "plugins/**/build.json"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-changes: ${{ steps.set-matrix.outputs.has-changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Get changed build.json files
        id: changed-files
        run: |
          # Get list of changed build.json files

          # For push events, compare against the previous commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep 'plugins/.*build\.json$' || true)

          echo "Changed build.json files:"
          echo "$CHANGED_FILES"

          # Save to output
          echo "changed-files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install JSON Schema CLI
        uses: sourcemeta/jsonschema@v11.8.3

      - name: Validate build.json files with JSON Schema
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.changed-files }}"

          if [ -z "$CHANGED_FILES" ]; then
            echo "No build.json files changed, skipping validation"
            exit 0
          fi

          echo "Validating changed build.json files against JSON Schema..."

          # Validate each changed file
          while IFS= read -r file; do
            [ -z "$file" ] && continue
            echo "Validating $file"
            jsonschema validate schemas/build.v1.json "$file" --http
          done <<< "$CHANGED_FILES"

          echo "âœ… All changed build.json files passed validation"

      - name: Parse build.json files and create matrix
        id: set-matrix
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.changed-files }}"

          if [ -z "$CHANGED_FILES" ]; then
            echo "No build.json files changed"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Initialize matrix array
          MATRIX_INCLUDE="["
          FIRST=true

          # Process each changed build.json file
          while IFS= read -r file; do
            [ -z "$file" ] && continue
            
            echo "Processing: $file"
            
            # Extract path components
            # Example path: plugins/SilentVoid13/Templater/tags/v2.15.2/build.json
            # Expected structure: plugins/{owner}/{repo}/tags/{version}/build.json
            if [[ $file =~ plugins/([^/]+)/([^/]+)/tags/([^/]+)/build\.json ]]; then
              OWNER="${BASH_REMATCH[1]}"
              REPO="${BASH_REMATCH[2]}"
              VERSION="${BASH_REMATCH[3]}"
              
              # Read and parse build.json
              if [ -f "$file" ]; then
                BUILD_JSON_CONTENT=$(cat "$file")
                
                # Extract and validate schema version
                SCHEMA_VERSION=$(echo "$BUILD_JSON_CONTENT" | jq -r '.version // empty')
                if [ -z "$SCHEMA_VERSION" ]; then
                  echo "Warning: $file missing required 'version' field, skipping"
                  continue
                elif [ "$SCHEMA_VERSION" != "1" ]; then
                  echo "Warning: $file has unsupported schema version '$SCHEMA_VERSION', skipping"
                  continue
                fi
                
                # Extract commit from build.json (now required)
                COMMIT=$(echo "$BUILD_JSON_CONTENT" | jq -r '.commit // empty')
                
                if [ -z "$COMMIT" ]; then
                  echo "Warning: $file missing required 'commit' field, skipping"
                  continue
                fi
                
                # Extract other optional fields
                PLUGIN_DIRECTORY=$(echo "$BUILD_JSON_CONTENT" | jq -r '.pluginDirectory // empty')
                BUILD_DIRECTORY=$(echo "$BUILD_JSON_CONTENT" | jq -r '.buildDirectory // empty')
                OUTPUT_DIRECTORY=$(echo "$BUILD_JSON_CONTENT" | jq -r '.outputDirectory // "dist"')
                
                # Use version from file path as pluginRef
                PLUGIN_REF="$VERSION"
                
                # Add comma separator for subsequent entries
                if [ "$FIRST" = false ]; then
                  MATRIX_INCLUDE="$MATRIX_INCLUDE,"
                fi
                FIRST=false
                
                # Build matrix entry
                MATRIX_INCLUDE="$MATRIX_INCLUDE{\"file\":\"$file\",\"owner\":\"$OWNER\",\"repo\":\"$REPO\",\"version\":\"$VERSION\",\"plugin-repository\":\"$OWNER/$REPO\",\"plugin-commit\":\"$COMMIT\",\"plugin-ref\":\"$PLUGIN_REF\""
                
                # Add optional fields if they exist
                if [ -n "$PLUGIN_DIRECTORY" ]; then
                  MATRIX_INCLUDE="$MATRIX_INCLUDE,\"plugin-directory\":\"$PLUGIN_DIRECTORY\""
                fi
                if [ -n "$BUILD_DIRECTORY" ]; then
                  MATRIX_INCLUDE="$MATRIX_INCLUDE,\"build-directory\":\"$BUILD_DIRECTORY\""
                fi
                if [ -n "$OUTPUT_DIRECTORY" ]; then
                  MATRIX_INCLUDE="$MATRIX_INCLUDE,\"output-directory\":\"$OUTPUT_DIRECTORY\""
                fi
                
                MATRIX_INCLUDE="$MATRIX_INCLUDE}"
                
                echo "Added to matrix: $OWNER/$REPO @ $VERSION"
              else
                echo "Warning: $file not found"
              fi
            else
              echo "Warning: $file does not match expected pattern plugins/{owner}/{repo}/tags/{version}/build.json"
            fi
          done <<< "$CHANGED_FILES"

          MATRIX_INCLUDE="$MATRIX_INCLUDE]"
          MATRIX="{\"include\":$MATRIX_INCLUDE}"

          echo "Final matrix:"
          echo "$MATRIX" | jq .

          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build-plugins:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    uses: ./.github/workflows/build.yml
    with:
      plugin-repository: ${{ matrix.plugin-repository }}
      plugin-ref: ${{ matrix.plugin-ref }}
      plugin-commit: ${{ matrix.plugin-commit }}
      plugin-directory: ${{ matrix.plugin-directory }}
      build-directory: ${{ matrix.build-directory }}
      output-directory: ${{ matrix.output-directory }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
